name: Playwright E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        browser: [chromium]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_openasp
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    # Cache for all npm dependencies
    - name: Cache node modules
      uses: actions/cache@v3
      id: cache-npm
      with:
        path: |
          node_modules
          asp-manager/node_modules
          ofasp-refactor/node_modules
          ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    # Cache for Python dependencies
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Cache for Playwright browsers
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      id: cache-playwright
      with:
        path: /home/runner/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Node dependencies (root)
      if: steps.cache-npm.outputs.cache-hit != 'true'
      run: npm ci

    - name: Install Playwright Browsers
      if: steps.cache-playwright.outputs.cache-hit != 'true'
      run: |
        export PLAYWRIGHT_BROWSERS_PATH=/home/runner/.cache/ms-playwright
        npx playwright install chromium
        npx playwright install-deps chromium

    - name: Verify browser installation
      run: |
        ls -la /home/runner/.cache/ms-playwright/
        find /home/runner/.cache/ms-playwright/ -name "*chrome*" -type f || true
      env:
        PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright

    - name: Install Node dependencies (asp-manager)
      if: steps.cache-npm.outputs.cache-hit != 'true'
      working-directory: ./asp-manager
      run: npm ci

    - name: Install Node dependencies (ofasp-refactor)
      if: steps.cache-npm.outputs.cache-hit != 'true'
      working-directory: ./ofasp-refactor
      run: npm ci

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ofasp-refactor/server/requirements.txt
        pip install flask flask-cors requests psycopg2-binary pytest psutil chromadb langchain

    - name: Create test environment file
      run: |
        echo "NODE_ENV=test" > .env
        echo "CI=true" >> .env
        echo "FLASK_ENV=testing" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_openasp" >> .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_NAME=test_openasp" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "POSTGRES_DB=test_openasp" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=postgres" >> .env
        echo "POSTGRES_ADMIN_USER=postgres" >> .env
        echo "POSTGRES_ADMIN_PASSWORD=postgres" >> .env

    - name: Wait for PostgreSQL
      run: |
        for i in {1..30}; do
          pg_isready -h localhost -p 5432 -U postgres && break
          echo "Waiting for PostgreSQL..."
          sleep 1
        done

    - name: Initialize database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_openasp -f database/catalog_schema.sql
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_openasp -f database/create_asp_terminal_table.sql
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_openasp -f database/create_jobinfo_table.sql
      env:
        PGPASSWORD: postgres

    - name: Create required directories
      run: |
        mkdir -p /tmp/aspuser/app/logs
        mkdir -p /tmp/aspuser/app/public/RAG
        mkdir -p /tmp/aspuser/app/models/bitnet

    - name: Start backend services (optional)
      run: |
        # 백엔드 서비스는 E2E 테스트에서 필수가 아니므로 시도만 함
        echo "Skipping backend services for frontend-focused E2E tests"
        echo "Frontend applications will be started by Playwright webServer config"

    - name: Wait for services to be ready
      run: |
        echo "Waiting for frontend services to start..."
        # Playwright webServer config will handle the waiting
        # Adding extra time for services to stabilize
        sleep 5

    - name: Run Playwright tests - ${{ matrix.browser }}
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true
        PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/

  test-all-browsers:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: All browser tests completed
      run: echo "All Playwright tests passed successfully!"